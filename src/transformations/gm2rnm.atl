-- @path MMGeneral=/model-driven-mobile-apps-generator/src/metamodel/general_design.ecore
-- @path MMReactNative=/model-driven-mobile-apps-generator/src/metamodel/rn_design.ecore

module gm2rnm;
create OUTReactNative : MMReactNative from INGeneral : MMGeneral;

rule loginForm2loginForm {
	from
		INGeneral : MMGeneral!LoginForm
	to 
		OUTReactNative : MMReactNative!LoginForm (
			buttonTitle <- INGeneral.buttonTitle,
			passwordPlaceholder <- INGeneral.passwordPlaceholder,
			userPlaceholder <- INGeneral.userPlaceholder,
			stateID <- INGeneral.stateID,
			flexVerticalPosition <- INGeneral.verticalPosition
		)
}

rule card2card {
	from
		INGeneral : MMGeneral!Card
	to 
		OUTReactNative : MMReactNative!Card (
			dataSource <- INGeneral.dataSource,
			stateID <- INGeneral.stateID,
			flexVerticalPosition <- INGeneral.verticalPosition
		)
}

rule radioButton2radioButton {
	from
		INGeneral : MMGeneral!RadioButton
	to 
		OUTReactNative : MMReactNative!RadioButton (
			defaultOption <- INGeneral.defaultOption,
			title <- INGeneral.title,
			stateID <- INGeneral.stateID,
			flexVerticalPosition <- INGeneral.verticalPosition
		)
}

rule list2list {
	from
		INGeneral : MMGeneral!ListC
	to 
		OUTReactNative : MMReactNative!ListC (
			dataSource <- INGeneral.dataSource,
			stateID <- INGeneral.stateID,
			flexVerticalPosition <- INGeneral.verticalPosition
		)
}

rule pickerElement2pickerElement {
	from
		INGeneral : MMGeneral!PickerElement
	to 
		OUTReactNative : MMReactNative!PickerElement (
			name <- INGeneral.name
		)
}

rule picker2picker {
	from
		INGeneral : MMGeneral!Picker
	to 
		OUTReactNative : MMReactNative!Picker (
			elements <- INGeneral.elements,
			defaultOption <- INGeneral.defaultOption,
			title <- INGeneral.title,
			stateID <- INGeneral.stateID,
			flexVerticalPosition <- INGeneral.verticalPosition
		)
}

rule inputText2inputText {
	from
		INGeneral : MMGeneral!InputText
	to 
		OUTReactNative : MMReactNative!InputText (
			placeholder <- INGeneral.placeholder,
			stateID <- INGeneral.stateID,
			flexVerticalPosition <- INGeneral.verticalPosition
		)
}

rule screen2screen {
	from
		INGeneral : MMGeneral!Screen
	to 
		OUTReactNative : MMReactNative!Screen (
			components <- INGeneral.components,
			title <- INGeneral.title,
			scrollable <- true,
			hasPreviousScreen <- thisModule.hasPreviousScreen(INGeneral.transitionIn),
			nextScreen <- thisModule.nextScreen(INGeneral.transitionOut)
		)
}

rule app2navigatorAndApp {
	from
		INGeneral : MMGeneral!GeneralMobileApp
	to 
		OUTReactNative : MMReactNative!Navigator (
			name <- 'Navigator1',
			type <- 'Stack',
			screens <- INGeneral.flowElements.asSet()->select(i | i.oclIsTypeOf(MMGeneral!Screen)),
			initialScreen <- thisModule.getInitialScreen(INGeneral.flowElements)
		),
		OUTReactNative2 : MMReactNative!MobileApp (
			name <- INGeneral.name,
			navigator <- OUTReactNative
		)
}

helper def : hasPreviousScreen(transition: OclAny) : Boolean = 
	not transition.input.oclIsTypeOf(MMGeneral!InitialNode);

helper def : nextScreen(transition: OclAny) : OclAny = 
	if (not transition.output.oclIsTypeOf(MMGeneral!FinalNode))
		then transition.output
	else
		OclUndefined
	endif;

helper def : getInitialScreen(flowElements: Set(OclAny)) : OclAny = 
	let initialNode : OclAny = flowElements->any(i | i.oclIsTypeOf(MMGeneral!InitialNode))
	in initialNode.transitionOut.output;
