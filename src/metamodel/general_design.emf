@gmf
@namespace(uri="http://genappgen", prefix="genAppGen")
package generalAppGenerator;

@gmf.diagram
class GeneralMobileApp {
  val FlowElement[3..*] flowElements;
  attr String name;
  val Transition[2..*] transitions;
}


abstract class FlowElement {
  ref Transition#output transitionIn;
  ref Transition#input transitionOut;
}

@gmf.link(target="output",
source="input",
resizable="true",
target.decoration="arrow", 
label="name",
tool.description="New transition.")
class Transition {
  ref FlowElement#transitionIn output;
  ref FlowElement#transitionOut input;
  attr String name;
}

@gmf.node(label.placement="none",
label.icon="false",
figure="svg",
svg.uri="platform:/plugin/model-driven-mobile-apps-generator/editor-icons/initial-node.svg",
resizable="false",
tool.description="New initial node.")
class InitialNode extends FlowElement {
}

@gmf.node(label.placement="none",
label.icon="false",
figure="svg",
svg.uri="platform:/plugin/model-driven-mobile-apps-generator/editor-icons/final-node.svg",
resizable="false",
tool.description="New final node.")
class FinalNode extends FlowElement {
}

@gmf.node(label="title",
label.placement="internal",
label.icon="false",
resizable="true",
tool.description="New Screen.")
class Screen extends FlowElement {
  @gmf.compartment()
  val Component[*] components;
  attr String title;
}


abstract class Component {
  attr int verticalPosition;
}

abstract class InputComponent extends Component {
  attr int stateID;
}

abstract class DynamicComponent extends Component {
  ref InputComponent[0..5] dataSource;
  attr int stateID;
}

@gmf.node(label.placement="none",
label.icon="false",
figure="svg",
svg.uri="platform:/plugin/model-driven-mobile-apps-generator/editor-icons/card.svg",
resizable="false",
tool.description="New card.")
class Card extends DynamicComponent {
}

@gmf.node(label="placeholder",
label.placement="internal",
label.icon="false",
resizable="true",
tool.description="New inputText.")
class InputText extends InputComponent {
  attr String placeholder;
}

@gmf.node(label.placement="none",
label.icon="false",
figure="svg",
svg.uri="platform:/plugin/model-driven-mobile-apps-generator/editor-icons/list.svg",
resizable="false",
tool.description="New listC.")
class ListC extends DynamicComponent {
}

@gmf.node(label="buttonTitle",
label.placement="external",
label.icon="false",
figure="svg",
svg.uri="platform:/plugin/model-driven-mobile-apps-generator/editor-icons/login.svg",
resizable="false",
tool.description="New loginForm.")
class LoginForm extends InputComponent {
  attr String userPlaceholder;
  attr String passwordPlaceholder;
  attr String buttonTitle;
}

@gmf.node(label="title",
label.placement="internal",
label.icon="false",
resizable="true",
tool.description="New picker.")
class Picker extends InputComponent {
  @gmf.compartment()
  val PickerElement[2..*] elements;
  ref PickerElement[1] defaultOption;
  attr String title;
}

@gmf.node(label="title",
label.placement="external",
label.icon="false",
figure="svg",
svg.uri="platform:/plugin/model-driven-mobile-apps-generator/editor-icons/check-box.svg",
resizable="false",
tool.description="New radioButton.")
class RadioButton extends InputComponent {
  attr String title;
  attr boolean defaultOption;
}

@gmf.node(label="name",
label.placement="internal",
label.icon="false",
resizable="true",
tool.description="New pickerElement.")
class PickerElement {
  attr String name;
}

