«IMPORT rnAppGenerator»
«EXTENSION template::auxiliares»
«DEFINE main FOR rnAppGenerator::MobileApp-»
«FILE 'index.js'-»
«EXPAND appIndexTemplate FOR this»
«ENDFILE»
«FILE 'App/App.js'-»
«EXPAND appMainTemplate FOR this»
«ENDFILE»
«EXPAND scenesGeneratorTemplate FOR this.navigator»
«ENDDEFINE»

«DEFINE appIndexTemplate FOR rnAppGenerator::MobileApp-»
import { AppRegistry } from 'react-native';
import App from './App/App';

AppRegistry.registerComponent('AppTemplate', () => App);

«ENDDEFINE»

«DEFINE appMainTemplate FOR rnAppGenerator::MobileApp-»
import React, { Component } from 'react';
import { Platform } from 'react-native';
import { StackNavigator, TabNavigator } from 'react-navigation';

«EXPAND importScenesNavigatorTemplate FOR navigator-»

const tabBarOptions = (Platform.OS === 'android') ?
  {
    style: { backgroundColor: '#303F9F' },
    indicatorStyle: { backgroundColor: '#FF4081' },
  } :
  {};

const tabNavigatorConfig = {
  backBehavior: 'none',
  tabBarPosition: 'bottom',
  tabBarOptions,
};

«EXPAND defineNavigatorTemplate FOR navigator-»

export default class App extends Component {
  render() {
    return (
      <«navigator.name» />
    );
  }
}

«ENDDEFINE»

«DEFINE scenesGeneratorTemplate FOR rnAppGenerator::Navigator-»
«EXPAND scenesInNavigatorGeneratorTemplate FOREACH screens-»
«EXPAND scenesGeneratorTemplate FOREACH nestedNavigators-»
«ENDDEFINE»

«DEFINE scenesInNavigatorGeneratorTemplate FOR rnAppGenerator::Screen-»
«FILE 'App/scenes/'+title.replaceAll(' ','')+'/index.js'-»
import React, { Component } from 'react';
import {
  Image,
  View,
  ScrollView,
  AsyncStorage,
} from 'react-native';
import {
  Container,
  Header,
  Title,
  Content,
  Icon,
  Button,
  Left,
  Right,
  Body,
  Text,
  Card,
  CardItem,
  List,
  ListItem,
  Item,
  Input,
  Radio,
  Picker,
  Form,
  Label,
} from 'native-base';
import { NavigationActions } from 'react-navigation';

«IF hasPreviousScreen-»
const navBack = NavigationActions.back();
«ENDIF-»
«IF nextScreen != null-»
const navForward = NavigationActions.navigate({
  routeName: '«nextScreen.title.replaceAll(' ','')»',
  params: {},
  action: {},
});
«ELSEIF nextNavigator != null-»
const navForward = NavigationActions.navigate({
  routeName: '«nextNavigator.name.replaceAll(' ','')»',
  params: {},
  action: {},
});
«ENDIF-»

class «title.replaceAll(' ','')» extends Component {
  static navigationOptions = {
    header: null,
  }
  
  constructor(props) {
    super(props);
    this.initialState = {
      «EXPAND stateComponentsTemplate FOREACH components-»
    };
    this.state = this.initialState;
  }
  
  componentDidMount() {
    «EXPAND populateInputComponentsTemplate FOREACH components-»
  }
  «IF nextScreen != null || nextNavigator != null-»
  
  saveAndGoForward() {
    «EXPAND saveInputComponentsValuesTemplate FOREACH components-»
    this.props.navigation.dispatch(navForward);
  }
  «ENDIF-»
  
  // eslint-disable-next-line class-methods-use-this
  async getInputValue(a) {
    let a1 = null;
    if (a !== null) {
      if (a.type !== 'login') {
        a1 = await AsyncStorage.getItem(a.key);
      } else {
        a1 = `${await AsyncStorage.getItem(a.key.split('-')[0])}-${await AsyncStorage.getItem(a.key.split('-')[1])}`;
      }
    }
    return a1;
  }
  
  getInputParams(a, b = null, c = null, d = null, e = null) {
    const a1 = this.getInputValue(a);
    const b1 = this.getInputValue(b);
    const c1 = this.getInputValue(c);
    const d1 = this.getInputValue(d);
    const e1 = this.getInputValue(e);
    return {
      a1,
      b1,
      c1,
      d1,
      e1,
    };
  }

  loadCardContentFromExternalSource(a, b, c, d, e) {
    const {
      a1,
      b1,
      c1,
      d1,
      e1,
    } = this.getInputParams(a, b, c, d, e);
    /**
     * Code for retrieving information from an external source using the params passed.
     * The external source could be a server, for instance, which could perform
     * different operations depending on the params' (a1, b1, c1, d1, e1) type and value.
     */
    return (
      <Card>
        <CardItem header>
          <Text>Card example</Text>
        </CardItem>
        <CardItem>
          <Body>
            <Text>
              Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aliquam
              eleifend leo non felis tristique, ac ullamcorper velit accumsan.
              Sed vitae leo ut urna porta laoreet. Praesent in imperdiet sem,
              ut rhoncus lacus. Praesent ultricies quis purus a euismod.
            </Text>
          </Body>
        </CardItem>
      </Card>
    );
  }
  
  loadListContentFromExternalSource(a, b, c, d, e) {
    const {
      a1,
      b1,
      c1,
      d1,
      e1,
    } = this.getInputParams(a, b, c, d, e);
    /**
     * Code for retrieving information from an external source using the params passed.
     * The external source could be a server, for instance, which could perform
     * different operations depending on the params' (a1, b1, c1, d1, e1) type and value.
     */
    return (
      <ScrollView>
        {/* Las listas deben marcar flex=1 dentro de la vista */}
        <List style={{ flex: 1 }}>
          <ListItem style={{ marginLeft: 0, paddingLeft: 15 }}>
            <Left style={{ flex: 1 }}>
              <Icon name="information-circle" style={{ color: '#157EFB' }} />
            </Left>
            <Body style={{ flex: 8 }}>
              <Text numberOfLines={1}>Simon Mignolet</Text>
            </Body>
            <Right style={{ flex: 1 }}>
              <Icon name="arrow-forward" />
            </Right>
          </ListItem>
          <ListItem style={{ marginLeft: 0, paddingLeft: 15 }}>
            <Left style={{ flex: 1 }}>
              <Icon name="information-circle" style={{ color: '#157EFB' }} />
            </Left>
            <Body style={{ flex: 8 }}>
              <Text numberOfLines={1}>Nathaniel Clyne</Text>
            </Body>
            <Right style={{ flex: 1 }}>
              <Icon name="arrow-forward" />
            </Right>
          </ListItem>
          <ListItem style={{ marginLeft: 0, paddingLeft: 15 }}>
            <Left style={{ flex: 1 }}>
              <Icon name="information-circle" style={{ color: '#157EFB' }} />
            </Left>
            <Body style={{ flex: 8 }}>
              <Text numberOfLines={1}>Dejan Lovren</Text>
            </Body>
            <Right style={{ flex: 1 }}>
              <Icon name="arrow-forward" />
            </Right>
          </ListItem>
        </List>
      </ScrollView>
    );
  }

  render() {
    return (
      <Container>
        <Header>
          <Left style={{ flex: 1 }}>
          «IF hasPreviousScreen-»
            <Button transparent onPress={() => this.props.navigation.dispatch(navBack)}>
              <Icon name="arrow-back" />
            </Button>
          «ENDIF-»
          </Left>
          <Body style={{ flex: 6 }}>
            <Title>«title»</Title>
          </Body>
          <Right style={{ flex: 1 }}>
          «IF nextScreen != null || nextNavigator != null-»
            <Button transparent onPress={() => this.saveAndGoForward()}>
              <Icon name="arrow-forward" />
            </Button>
          «ENDIF-»
          </Right>
        </Header>
        «IF scrollable == false-»
        <Content scrollEnabled={false} style={{ flex: 1 }} contentContainerStyle={{ flex: 1 }}>
          <View style={{ flex: 12 }}>
            «FOREACH components.sortBy(e|e.flexHorizontalPosition).sortBy(e|e.flexVerticalPosition) AS c-»
            «IF c.flexHorizontalSize < 4 && c.flexHorizontalPosition == 1-»
            <View style={{ flex: «c.flexVerticalSize», flexDirection: 'row' }}>
            «ENDIF-»
            «IF c.flexHorizontalSize == 4-»
            <View style={{
                flex: «c.flexVerticalSize»,
                flexDirection: 'row',
                justifyContent: '«getAlignment(c.horizontalAlignment)»',
                alignItems: '«getAlignment(c.verticalAlignment)»',
                «IF c.margin != null-»
                margin: «c.margin»,
                «ENDIF-»
                «IF c.padding != null-»
                padding: «c.padding»,
                «ENDIF-»
              }}
            >
            «ELSE-»
            <View style={{
                flex: «c.flexHorizontalSize»,
                justifyContent: '«getAlignment(c.verticalAlignment)»',
                alignItems: '«getAlignment(c.horizontalAlignment)»',
                «IF c.margin != null-»
                margin: «c.margin»,
                «ENDIF-»
                «IF c.padding != null-»
                padding: «c.padding»,
                «ENDIF-»
              }}
            >
            «ENDIF-»
            «EXPAND contentComponentsTemplate FOR c-»
            </View>
            «IF c.flexHorizontalSize < 4 && c.isLastHorizontal == true-»
            </View>
            «ENDIF-»
            «ENDFOREACH-»
          </View>
        </Content>
        «ELSE-»
        <Content>
          «FOREACH components.sortBy(e|e.flexHorizontalPosition).sortBy(e|e.flexVerticalPosition) AS c-»
          «IF c.flexHorizontalSize < 4 && c.flexHorizontalPosition == 1-»
          <View style={{ flex: 1, flexDirection: 'row' }}>
          «ENDIF-»
          «IF c.flexHorizontalSize == 4-»
          <View style={{
              flex: 1,
              flexDirection: 'row',
              justifyContent: '«getAlignment(c.horizontalAlignment)»',
              alignItems: '«getAlignment(c.verticalAlignment)»',
              «IF c.margin != null-»
              margin: «c.margin»,
              «ENDIF-»
              «IF c.padding != null-»
              padding: «c.padding»,
              «ENDIF-»
            }}
          >
          «ELSE-»
          <View style={{
              flex: '«c.flexHorizontalSize»',
              justifyContent: '«getAlignment(c.verticalAlignment)»',
              alignItems: '«getAlignment(c.horizontalAlignment)»',
              «IF c.margin != null-»
              margin: «c.margin»,
              «ENDIF-»
              «IF c.padding != null-»
              padding: «c.padding»,
              «ENDIF-»
            }}
          >
          «ENDIF-»
          «EXPAND contentComponentsTemplate FOR c-»
          </View>
          «IF c.flexHorizontalSize < 4 && c.isLastHorizontal == true-»
          </View>
          «ENDIF-»
          «ENDFOREACH-»
        </Content>
        «ENDIF-»
      </Container>
    );
  }
}

export default «title.replaceAll(' ','')»;
«ENDFILE»
«ENDDEFINE»

«DEFINE importScenesNavigatorTemplate FOR rnAppGenerator::Navigator-»
«EXPAND importScenesTemplate FOREACH screens-»
«EXPAND importScenesNavigatorTemplate FOREACH nestedNavigators-»
«ENDDEFINE»

«DEFINE importScenesTemplate FOR Screen-»
import «title.replaceAll(' ','')» from './scenes/«title.replaceAll(' ','')»';
«ENDDEFINE»

«DEFINE defineNavigatorTemplate FOR rnAppGenerator::Navigator-»
«EXPAND defineNavigatorTemplate FOREACH nestedNavigators-»
const «name.replaceAll(' ','')» = «IF type == NavigatorType::Stack»StackNavigator«ELSE»TabNavigator«ENDIF»(
  {
    «EXPAND scenesInNavigator FOREACH screens-»
    «EXPAND navigatorsInNavigator FOREACH nestedNavigators-»
  },
  {
    initialRouteName: '«initialScreen.title.replaceAll(' ','')»',
    «IF type == NavigatorType::Tab-»
    ...tabNavigatorConfig,
    «ENDIF-»
  },
);
«ENDDEFINE»

«DEFINE scenesInNavigator FOR rnAppGenerator::Screen-»
    «title.replaceAll(' ','')»: { screen: «title.replaceAll(' ','')» },
«ENDDEFINE»

«DEFINE navigatorsInNavigator FOR rnAppGenerator::Navigator-»
    «name.replaceAll(' ','')»: { screen: «name.replaceAll(' ','')» },
«ENDDEFINE»

«DEFINE stateComponentsTemplate FOR rnAppGenerator::Component-»
      «IF metaType == rnAppGenerator::LoginForm-»
      username«stateID»: '',
      password«stateID»: '',
      «ELSEIF metaType == rnAppGenerator::InputText-»
      inputText«stateID»: '',
      «ELSEIF metaType == rnAppGenerator::Picker-»
      itemSelected«stateID»: '«defaultOption.name»',
      «ELSEIF metaType == rnAppGenerator::RadioButton-»
      radioButton«stateID»: «defaultOption»,
      «ENDIF-»
«ENDDEFINE»

«DEFINE populateInputComponentsTemplate FOR rnAppGenerator::Component-»
    «IF metaType == rnAppGenerator::LoginForm || metaType == rnAppGenerator::InputText || metaType == rnAppGenerator::Picker || metaType == rnAppGenerator::RadioButton-»
    AsyncStorage.getItem('«getInputComponentKey(metaType)»«stateID»')
      .then((value) => {
        console.log(value);
        if (value !== null) {
          «IF metaType == rnAppGenerator::RadioButton-»
          if (value === 'true') {
            this.setState({ radioButton«stateID»: true });
          } else {
            this.setState({ radioButton«stateID»: false });
          }
          «ELSE-»
          this.setState({ «getInputComponentKey(metaType)»«stateID»: value });
          «ENDIF-»
        }
      })
      .catch((error) => {
        console.log(error);
      });
    «IF metaType == rnAppGenerator::LoginForm-»
    AsyncStorage.getItem('password«stateID»')
      .then((value) => {
        console.log(value);
        if (value !== null) {
          this.setState({ password«stateID»: value });
        }
      })
      .catch((error) => {
        console.log(error);
      });
    «ENDIF-»
    «ENDIF-»
«ENDDEFINE»

«DEFINE saveInputComponentsValuesTemplate FOR rnAppGenerator::Component-»
    «IF metaType == rnAppGenerator::LoginForm || metaType == rnAppGenerator::InputText || metaType == rnAppGenerator::Picker || metaType == rnAppGenerator::RadioButton-»
    AsyncStorage.setItem('«getInputComponentKey(metaType)»«stateID»', this.state.«getInputComponentKey(metaType)»«stateID»«IF metaType == rnAppGenerator::RadioButton-».toString()«ENDIF-»)
      .then((value) => {
        console.log(value);
      })
      .catch((error) => {
        console.log(error);
      });
    «IF metaType == rnAppGenerator::LoginForm-»
    AsyncStorage.setItem('password«stateID»', this.state.password«stateID»)
      .then((value) => {
        console.log(value);
      })
      .catch((error) => {
        console.log(error);
      });
    «ENDIF-»
    «ENDIF-»
«ENDDEFINE»

«DEFINE inputComponentDataSourceTemplate FOR rnAppGenerator::Component-»
                «IF metaType == rnAppGenerator::LoginForm || metaType == rnAppGenerator::InputText || metaType == rnAppGenerator::Picker || metaType == rnAppGenerator::RadioButton-»
                {
                  type: '«IF metaType == rnAppGenerator::LoginForm-»login«ELSE-»«getInputComponentKey(metaType)»«ENDIF-»',
                  key: '«IF metaType == rnAppGenerator::LoginForm-»username«stateID»-password«stateID»«ELSE-»«getInputComponentKey(metaType)»«stateID»«ENDIF-»',
                },
                «ENDIF-»
«ENDDEFINE»

«DEFINE pickerItemTemplate FOR rnAppGenerator::PickerElement-»
                <Item label="«name»" value="«name»" />
«ENDDEFINE»

«DEFINE contentComponentsTemplate FOR rnAppGenerator::Component-»
            «IF metaType == rnAppGenerator::Text-»
              <Text style={{ fontSize: «fontSize», color: '«color»' }}>
                «text»
              </Text>
            «ELSEIF metaType == rnAppGenerator::Button-»
              <Button «theme»«IF type != ButtonType::defaultType» «type»«ENDIF»«IF size != ButtonSize::regular» «size»«ENDIF» style={{ alignSelf: '«getAlignment(horizontalAlignment)»' }}>
                <Text>«text»</Text>
              </Button>
            «ELSEIF metaType == rnAppGenerator::ListC-»
            «IF stateID == null || stateID == 0-»
              <ScrollView>
                <List style={{ flex: 1 }}>
                  «FOREACH items AS i-»
                  <ListItem style={{ marginLeft: 0, paddingLeft: 15 }}>
                    «IF i.leftIcon != null-»
                    <Left style={{ flex: 1 }}>
                      <Icon name="«i.leftIcon.name»" style={{ color: '«i.leftIcon.color»' }} />
                    </Left>
                    «ENDIF-»
                    <Body style={{ flex: «IF i.leftIcon == null || i.rightIcon == null»9«ELSE»8«ENDIF» }}>
                      <Text numberOfLines={1}>«i.text»</Text>
                    </Body>
                    «IF i.rightIcon != null-»
                    <Right style={{ flex: 1 }}>
                      <Icon name="«i.rightIcon.name»" style={{ color: '«i.rightIcon.color»' }} />
                    </Right>
                    «ENDIF-»
                  </ListItem>
                  «ENDFOREACH-»
                </List>
              </ScrollView>
            «ELSE-»
              {this.loadListContentFromExternalSource(
                «EXPAND inputComponentDataSourceTemplate FOREACH dataSource-»
              )}
            «ENDIF-»
            «ELSEIF metaType == rnAppGenerator::Icon-»
              <Icon «IF active»active «ENDIF»name="«name»" style={{ fontSize: «size», color: '«color»' }} />
            «ELSEIF metaType == rnAppGenerator::InputText-»
              <Item «type»>
                <Input
                  placeholder="«placeholder»"
                  onChangeText={inputText«stateID» => this.setState({ inputText«stateID» })}
                  value={this.state.inputText«stateID»}
                />
              </Item>
            «ELSEIF metaType == rnAppGenerator::Card-»
            «IF stateID == null || stateID == 0-»
              <Card>
                <CardItem header>
                  <Text>«header»</Text>
                </CardItem>
                <CardItem>
                  <Body>
                    <Text>«body»</Text>
                  </Body>
                </CardItem>
              </Card>
            «ELSE-»
              {this.loadCardContentFromExternalSource(
                «EXPAND inputComponentDataSourceTemplate FOREACH dataSource-»
              )}
            «ENDIF-»
            «ELSEIF metaType == rnAppGenerator::LoginForm-»
              <Form style={{ flex: 1 }}>
                <Item fixedLabel>
                  <Label>«userPlaceholder»</Label>
                  <Input
                    onChangeText={username«stateID» => this.setState({ username«stateID» })}
                    value={this.state.username«stateID»}
                  />
                </Item>
                <Item fixedLabel last>
                  <Label>«passwordPlaceholder»</Label>
                  <Input
                    onChangeText={password«stateID» => this.setState({ password«stateID» })}
                    value={this.state.password«stateID»}
                    secureTextEntry
                    />
                </Item>
                <Button style={{ alignSelf: 'center', margin: 10 }}>
                  <Text>«buttonTitle»</Text>
                </Button>
              </Form>
            «ELSEIF metaType == rnAppGenerator::Picker-»
              <Form>
                <Text>«title»</Text>
                <Picker
                  iosHeader="Select one"
                  mode="dropdown"
                  selectedValue={this.state.itemSelected«stateID»}
                  onValueChange={value => this.setState({ itemSelected«stateID»: value })}
                >
                  «EXPAND pickerItemTemplate FOREACH elements-»
                </Picker>
              </Form>
            «ELSEIF metaType == rnAppGenerator::RadioButton-»
              <List style={{ flex: 1 }}>
                <ListItem
                  style={{ marginLeft: 0, paddingLeft: 15 }}
                  onPress={() => this.setState({ radioButton«stateID»: !this.state.radioButton«stateID» })}
                >
                  <Body style={{ flex: 9 }}>
                    <Text>«title»</Text>
                  </Body>
                  <Right style={{ flex: 1 }}>
                    <Radio
                      onPress={() => this.setState({ radioButton«stateID»: !this.state.radioButton«stateID» })}
                      selected={this.state.radioButton«stateID»}
                    />
                  </Right>
                </ListItem>
              </List>
            «ENDIF-»
«ENDDEFINE»
